# ==============================================================================
# Bytebot Hawkeye System Configuration (Script-Managed)
# ==============================================================================
# This file contains system settings managed by scripts (start-stack.sh, etc.)
# DO NOT add API keys here - use docker/.env instead
# ==============================================================================

# Hawkeye Precision Features
BYTEBOT_GRID_OVERLAY=true
BYTEBOT_GRID_DEBUG=false
BYTEBOT_PROGRESSIVE_ZOOM_USE_AI=true
BYTEBOT_SMART_FOCUS=true
BYTEBOT_SMART_FOCUS_MODEL=gpt-4o-mini
BYTEBOT_UNIVERSAL_TEACHING=true
BYTEBOT_ADAPTIVE_CALIBRATION=true
BYTEBOT_ZOOM_REFINEMENT=true
BYTEBOT_COORDINATE_METRICS=true
BYTEBOT_COORDINATE_DEBUG=false

# CV-First Workflow Enforcement
BYTEBOT_ENFORCE_CV_FIRST=true  # Require computer_detect_elements before computer_click_mouse for UI elements

# Direct Vision Mode - Bypass CV tools for pure vision-based control
# When enabled globally, ALL tasks will use Direct Vision Mode regardless of per-task setting
# Vision models (Claude Opus 4, GPT-4o) get only screenshot + mouse/keyboard tools (no Holo/CV)
BYTEBOT_FORCE_DIRECT_VISION_MODE=false

# Click Accuracy Settings
BYTEBOT_SMART_CLICK_SUCCESS_RADIUS=12
BYTEBOT_POST_CLICK_CALIBRATION=true
BYTEBOT_DRIFT_COMPENSATION=true
BYTEBOT_DRIFT_SMOOTHING=0.2
BYTEBOT_PRECLICK_SNAP=true
BYTEBOT_SNAP_RADIUS=6
BYTEBOT_SNAP_PENALTY=0.25
BYTEBOT_CLICK_RETRY_ON_NOCHANGE=true
BYTEBOT_CLICK_VERIFY_DELAY=250
BYTEBOT_CLICK_VERIFY_RADIUS=12
BYTEBOT_CLICK_VERIFY_THRESHOLD=4.0
BYTEBOT_CLICK_RETRY_MAX=1

# ==============================================================================
# Holo 1.5-7B Integration (UI Element Localization Model)
# ==============================================================================
# GPU Auto-Detection: start-stack.sh automatically detects GPU and configures Holo:
# - NVIDIA GPU detected → Holo enabled with GPU acceleration (~0.6-2s/frame)
# - CPU-only detected  → Holo disabled, uses Tesseract.js OCR fallback
#
# Manual Override: Set BYTEBOT_CV_USE_HOLO=false to disable Holo regardless of GPU
#
# Note: HOLO_URL is platform-specific - set automatically by scripts
# - Apple Silicon: http://host.docker.internal:9989 (native with MPS GPU)
# - x86_64 + GPU: http://bytebot-holo:9989 (Docker container with CUDA)
# - x86_64 CPU-only: Holo container skipped entirely (too slow: 15-30s/frame)
BYTEBOT_CV_USE_HOLO=true
HOLO_URL=http://host.docker.internal:9989
HOLO_TIMEOUT=120000  # 2 minutes for first-time model loading + multi-prompt detection
HOLO_DEBUG_RAW=false  # Enable raw model output logging for debugging

# Performance profile: SPEED (2-3s), BALANCED (4-6s), or QUALITY (10-16s)
# SPEED: Disables OCR, limits captions to 15, uses simple prompts
# BALANCED: Selective OCR, limits captions to 25, detailed prompts (RECOMMENDED)
# QUALITY: Full OCR, up to 100 captions, maximum accuracy
HOLO_PERFORMANCE_PROFILE=balanced

# Advanced settings (override profile defaults if needed)
# HOLO_ENABLE_OCR=true              # Enable OCR text detection (auto-determined by profile)
# HOLO_MAX_CAPTIONS=25              # Maximum elements to caption (auto-determined by profile)
# HOLO_CAPTION_PROMPT=DETAILED_CAPTION  # Caption detail level (auto-determined by profile)
# HOLO_BATCH_SIZE=32                # Caption batch size for MPS (32) or GPU (128)
# HOLO_MIN_CONFIDENCE=0.05          # Minimum confidence threshold
# HOLO_IOU_THRESHOLD=0.1            # Overlap removal threshold

# Device configuration (auto-detect recommended)
HOLO_DEVICE=auto  # auto, cuda, mps, or cpu
HOLO_MODEL_DTYPE=float16

# Set-of-Mark (SOM) Visual Grounding - 50% accuracy improvement (30% → 70-85%)
BYTEBOT_USE_SOM_SCREENSHOTS=true  # Enable numbered element annotations for VLM click accuracy

# ==============================================================================
# Windows 11 Container Settings (when using --os windows)
# ==============================================================================
# Windows version: 11 (default), 11l (LTSC), 11e (Enterprise), 10
WINDOWS_VERSION=11

# System resources
WINDOWS_RAM_SIZE=12G       # Recommended: 12G for smooth operation (Windows 11 + Node.js + npm)
WINDOWS_CPU_CORES=6        # Recommended: 6 cores for faster installation and multitasking
WINDOWS_DISK_SIZE=150G     # Disk space for Windows installation + npm packages + updates

# Display resolution (target: 1280x960, actual: 1280x720 due to VirtIO GPU limitation)
# VirtIO GPU defaults to 720p regardless of env var. QXL would support 960p but not available.
WINDOWS_RESOLUTION=1280x960

# Optional: Shared folder for file transfer between host and Windows
# WINDOWS_SHARED_DIR=./shared

# ==============================================================================
# macOS Container Settings (when using --os macos)
# ==============================================================================
# IMPORTANT: Should only run on Apple hardware (licensing requirements)
# macOS version: 14 (Sonoma, default), 15 (Sequoia), 13 (Ventura), 12 (Monterey), 11 (Big Sur)
MACOS_VERSION=14

# System resources
MACOS_RAM_SIZE=8G         # Recommended: 8G minimum for smooth operation
MACOS_CPU_CORES=4         # Recommended: 4 cores minimum
MACOS_DISK_SIZE=64G       # Disk space for macOS installation

# Display resolution (matches Linux/Windows: 1280x960)
MACOS_RESOLUTION=1280x960

# Optional: Shared folder for file transfer between host and macOS
# MACOS_SHARED_DIR=./shared

# ==============================================================================
# LMStudio Local Model Integration (OpenAI-compatible API)
# ==============================================================================
# Configure local models via: ./scripts/setup-lmstudio.sh
# Models appear in UI under "Local Models" section (no API costs)
LMSTUDIO_ENABLED=false
LMSTUDIO_BASE_URL=http://192.168.4.112:1234/v1
LMSTUDIO_API_KEY=lm-studio
