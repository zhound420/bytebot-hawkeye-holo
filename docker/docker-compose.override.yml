# Docker Compose Override - Cross-Platform Optimizations
# This file is automatically loaded by Docker Compose.
#
# 1. Force x86_64 Architecture
#    - Ensures consistent builds across Mac (Apple Silicon), Linux, and Windows
#    - On Apple Silicon: Uses Rosetta 2 emulation (~20% slower but stable)
#    - On x86_64 systems: Native performance, no emulation
#    - Benefits: Consistent OpenCV binaries, no platform-specific build issues
#
# 2. GPU Configuration for Holo 1.5-7B
#    - Supports both modern CDI and legacy nvidia-docker runtime
#    - Automatically enables NVIDIA GPU if nvidia-container-toolkit is installed
#    - Falls back to CPU if GPU not available (no errors)
#    - Apple Silicon: GPU config ignored (no NVIDIA support in Docker)

services:
  bytebot-agent:
    platform: linux/amd64

  bytebot-desktop:
    platform: linux/amd64

  bytebot-ui:
    platform: linux/amd64

  bytebot-holo:
    platform: linux/amd64

    # GPU Support - Graceful GPU/CPU Fallback
    # Uses modern device reservation (Docker Compose 2.3+, CDI-compatible)
    # Docker gracefully ignores GPU config if nvidia-container-toolkit not available
    # CPU-only systems: start-stack.sh auto-detects and skips Holo container

    # NOTE: 'runtime: nvidia' removed - it fails on CPU-only systems before container starts
    # The deploy.resources.reservations approach handles missing GPU gracefully

    # Modern device reservation (preferred, works with CDI)
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu, compute, utility]

    # NVIDIA environment variables (required for both legacy and modern)
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      # Disable NVIDIA requirement check (allows CPU fallback)
      - NVIDIA_REQUIRE_CUDA=

  bytebot-llm-proxy:
    platform: linux/amd64
